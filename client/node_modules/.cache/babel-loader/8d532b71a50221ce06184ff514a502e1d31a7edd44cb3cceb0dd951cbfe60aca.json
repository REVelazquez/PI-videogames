{"ast":null,"code":"import axios from 'axios';\nimport { GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES } from './action-types';\n\n//URLS\nconst URL = 'http://localhost:3001/videogames';\nconst URL_Name = 'http://localhost:3001/videogames?name=';\nconst URL_ID = 'http://localhost:3001/videogames/';\nconst URL_GENRES = 'localhost:3001/genres';\n\n//-----------------------Actions para rutas \"gets\"-----------------------//\nexport const getGame = name => {\n  return async dispatch => {\n    try {\n      if (name) {\n        let info = await axios.get(`${URL_Name}${name}`);\n        let results = [];\n        results.push(info.data);\n        return dispatch({\n          type: GET_GAMES,\n          payload: results\n        });\n      } else {\n        let info = await axios.get(`${URL}`);\n        let results = [];\n        results.push(info.data);\n        return dispatch({\n          type: GET_GAMES,\n          payload: results\n        });\n      }\n    } catch (error) {\n      return {\n        error: error.message\n      };\n    }\n  };\n};\nexport const getGamesById = async id => {\n  const url = `${URL_ID}${id}`;\n  return async dispatch => {\n    try {\n      const info = await axios.get(url);\n      return dispatch({\n        type: GET_GAMES_BY_ID,\n        payload: info\n      });\n    } catch (error) {\n      return {\n        error: error.message\n      };\n    }\n  };\n};\nexport const getGenres = () => {\n  return async dispatch => {\n    try {\n      const info = await axios.get(URL_GENRES);\n      return dispatch({\n        type: GET_GENRES,\n        payload: info.data\n      });\n    } catch (error) {\n      return {\n        error: error.message\n      };\n    }\n  };\n};\n\n//-------------------------action para ruta post---------------------//\nexport const postGames = async payload => {\n  const url = URL;\n  return async dispatch => {\n    try {\n      let info = await axios.post(url, payload);\n      return dispatch({\n        type: POST_GAMES,\n        payload: info.data\n      });\n    } catch (error) {\n      return {\n        error: error.message\n      };\n    }\n  };\n};\n\n//--------------------------actions de ordenamiento--------------------//\n\nexport const filterGamesByGenre = genre => {\n  return {\n    type: GENRE_FILTERED_GAMES,\n    payload: genre\n  };\n};\nexport const filterGamesByOrigin = origin => {\n  return {\n    type: ORIGIN_FILTERED_GAMES,\n    payload: origin\n  };\n};\nexport const orderGamesByLetter = letters => {\n  return {\n    type: LETTERS_ORDERED_GAMES,\n    payload: letters\n  };\n};\nexport const orderGamesByRating = rating => {\n  return {\n    type: RATING_ORDERED_GAMES,\n    payload: rating\n  };\n};","map":{"version":3,"names":["axios","GET_GAMES","GET_GAMES_BY_ID","GET_GENRES","POST_GAMES","ORIGIN_FILTERED_GAMES","GENRE_FILTERED_GAMES","RATING_ORDERED_GAMES","LETTERS_ORDERED_GAMES","URL","URL_Name","URL_ID","URL_GENRES","getGame","name","dispatch","info","get","results","push","data","type","payload","error","message","getGamesById","id","url","getGenres","postGames","post","filterGamesByGenre","genre","filterGamesByOrigin","origin","orderGamesByLetter","letters","orderGamesByRating","rating"],"sources":["C:/Users/rodri/Desktop/PI-Videogames/PI-videogames/client/src/redux/actions.js"],"sourcesContent":["import axios from 'axios';\r\nimport {GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES } from './action-types'\r\n\r\n//URLS\r\nconst URL='http://localhost:3001/videogames'\r\nconst URL_Name = 'http://localhost:3001/videogames?name='\r\nconst URL_ID = 'http://localhost:3001/videogames/'\r\nconst URL_GENRES= 'localhost:3001/genres'\r\n\r\n\r\n//-----------------------Actions para rutas \"gets\"-----------------------//\r\nexport const getGame = (name)=>{\r\n    return async(dispatch) => {\r\n        try{\r\n            if(name){\r\n                let info = await axios.get(`${URL_Name}${name}`);\r\n                let results= []\r\n                results.push(info.data)\r\n                return dispatch({\r\n                    type: GET_GAMES,\r\n                    payload:results\r\n                })\r\n            } else {\r\n                let info = await axios.get(`${URL}`);   \r\n                let results= []\r\n                results.push(info.data)\r\n                return dispatch({\r\n                    type: GET_GAMES,\r\n                    payload:results\r\n                })\r\n            }\r\n        } catch(error){\r\n            return ({error:error.message});   \r\n        }\r\n    }\r\n}\r\n\r\nexport const getGamesById= async(id)=>{\r\n    const url=`${URL_ID}${id}`\r\n    return async (dispatch)=>{\r\n        try {\r\n            const info= await axios.get(url)\r\n            return dispatch({\r\n                type:GET_GAMES_BY_ID,\r\n                payload:info\r\n            })\r\n        } catch (error) {\r\n            return {error:error.message}\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport const getGenres=  ()=>{\r\n        return async (dispatch)=>{\r\n            try {\r\n                const info= await axios.get(URL_GENRES)\r\n                return dispatch({\r\n                    type:GET_GENRES,\r\n                    payload: info.data\r\n                })\r\n            } catch (error) {\r\n                return {error:error.message}\r\n            }\r\n        }\r\n}\r\n\r\n//-------------------------action para ruta post---------------------//\r\nexport const postGames= async (payload)=>{\r\n    const url = URL\r\n    return async (dispatch)=>{\r\n        try {\r\n            let info = await axios.post(url, payload)\r\n            return dispatch({\r\n                type:POST_GAMES,\r\n                payload: info.data\r\n            })\r\n        } catch (error) {\r\n            return {error:error.message}\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n//--------------------------actions de ordenamiento--------------------//\r\n\r\nexport const filterGamesByGenre = (genre)=>{\r\n    return {type:GENRE_FILTERED_GAMES, payload:genre}\r\n}\r\n\r\nexport const filterGamesByOrigin = (origin)=>{\r\n    return {type:ORIGIN_FILTERED_GAMES, payload: origin}\r\n}\r\n\r\nexport const orderGamesByLetter = (letters)=>{\r\n    return {type:LETTERS_ORDERED_GAMES, payload: letters}\r\n}\r\n\r\nexport const orderGamesByRating = (rating)=>{\r\n    return {type:RATING_ORDERED_GAMES, payload: rating}\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}