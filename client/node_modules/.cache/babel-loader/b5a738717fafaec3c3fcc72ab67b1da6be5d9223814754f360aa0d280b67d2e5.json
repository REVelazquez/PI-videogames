{"ast":null,"code":"import { GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES, GET_GAMES_BY_NAME } from './action-types';\nconst initialState = {\n  allVideogames: [],\n  genres: [],\n  filteredGames: [],\n  detail: {}\n};\n\n//----en la siguiente linea inicio el reducer, pasandole por parametros el stado inicial y las actions destructuradas--//\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  // utilizo un switch para no hacer \"if\" encadenados o en cascadas.\n  switch (type) {\n    ///casos de recuperacion de datos o de carga de los mismos\n    case GET_GAMES:\n      return {\n        ...state,\n        allVideogames: payload,\n        filteredGames: payload\n      };\n    case GET_GAMES_BY_NAME:\n      return {\n        ...state,\n        filteredGames: payload\n      };\n    case GET_GAMES_BY_ID:\n      return {\n        ...state,\n        detail: payload\n      };\n    case GET_GENRES:\n      return {\n        ...state,\n        genres: payload\n      };\n    case POST_GAMES:\n      return {\n        ...state\n      };\n    //casos de ordenamiento o filtrado\n    case ORIGIN_FILTERED_GAMES:\n      const filteredFrom = payload === 'db' ? [...state.allVideogames].filter(game => isNaN(parseInt(game.id))) : payload === 'api' ? [...state.allVideogames].filter(game => !isNaN(parseInt(game.id))) : [...state.allVideogames];\n      return {\n        ...state,\n        filteredGames: filteredFrom\n      };\n    case GENRE_FILTERED_GAMES:\n      let videogames = state.filteredGames;\n      let filterGenres = payload === \"All\" ? videogames : videogames.filter(game => game.genres.includes(payload));\n      return {\n        ...state,\n        filteredGames: filterGenres\n      };\n    case RATING_ORDERED_GAMES:\n      const allVideogamesCopy = [...state.allVideogames];\n      const orderedGames = payload === 'A' ? allVideogamesCopy.sort((a, b) => a.rating - b.rating) : payload === 'D' ? allVideogamesCopy.sort((a, b) => b.rating - a.rating) : [...state.allVideogames];\n      return {\n        ...state,\n        filteredGames: orderedGames\n      };\n    case LETTERS_ORDERED_GAMES:\n      const allVideogamesCopy2 = [...state.allVideogames];\n      const orderedGamesByName = payload === 'A-Z' ? allVideogamesCopy2.sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase())) : payload === 'Z-A' ? allVideogamesCopy2.sort((a, b) => b.name.toLowerCase().localeCompare(a.name.toLowerCase())) : [...state.allVideogames];\n      return {\n        ...state,\n        filteredGames: orderedGamesByName\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["GET_GAMES","GET_GAMES_BY_ID","GET_GENRES","POST_GAMES","ORIGIN_FILTERED_GAMES","GENRE_FILTERED_GAMES","RATING_ORDERED_GAMES","LETTERS_ORDERED_GAMES","GET_GAMES_BY_NAME","initialState","allVideogames","genres","filteredGames","detail","reducer","state","arguments","length","undefined","type","payload","filteredFrom","filter","game","isNaN","parseInt","id","videogames","filterGenres","includes","allVideogamesCopy","orderedGames","sort","a","b","rating","allVideogamesCopy2","orderedGamesByName","name","toLowerCase","localeCompare"],"sources":["C:/Users/rodri/Desktop/PI-Videogames/PI-videogames/client/src/redux/reducer.js"],"sourcesContent":["\r\nimport {GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES, GET_GAMES_BY_NAME} from './action-types'\r\n\r\nconst initialState={\r\n    allVideogames:[],\r\n    genres:[],\r\n    filteredGames: [],\r\n    detail: {}\r\n}\r\n\r\n//----en la siguiente linea inicio el reducer, pasandole por parametros el stado inicial y las actions destructuradas--//\r\nconst reducer= (state = initialState, {type, payload})=>{\r\n\r\n// utilizo un switch para no hacer \"if\" encadenados o en cascadas.\r\n    switch(type){\r\n///casos de recuperacion de datos o de carga de los mismos\r\n        case GET_GAMES:\r\n            return {\r\n              ...state,\r\n              allVideogames: payload,\r\n              filteredGames: payload,\r\n            };\r\n        case GET_GAMES_BY_NAME:\r\n          return{\r\n            ...state,\r\n            filteredGames:payload\r\n          }\r\n        case GET_GAMES_BY_ID:\r\n            return{\r\n                ...state,\r\n                detail:payload,\r\n            }\r\n        case GET_GENRES:\r\n            return {\r\n                ...state,\r\n                genres: payload,\r\n            };\r\n        case POST_GAMES:\r\n            return{\r\n                ...state,\r\n            }\r\n//casos de ordenamiento o filtrado\r\n        case ORIGIN_FILTERED_GAMES:\r\n          const filteredFrom =\r\n            payload === 'db'\r\n              ? [...state.allVideogames].filter((game) => isNaN(parseInt(game.id)))\r\n              : payload === 'api'\r\n              ? [...state.allVideogames].filter((game) => !isNaN(parseInt(game.id)))\r\n              : [...state.allVideogames];\r\n          return {\r\n            ...state,\r\n            filteredGames: filteredFrom,\r\n          };\r\n        case GENRE_FILTERED_GAMES:\r\n        let videogames = state.filteredGames\r\n        let filterGenres =\r\n          payload === \"All\"\r\n            ? videogames\r\n            : videogames.filter((game) => game.genres.includes(payload));\r\n          return {\r\n            ...state,\r\n            filteredGames: filterGenres,\r\n          };\r\n        case RATING_ORDERED_GAMES:\r\n          const allVideogamesCopy = [...state.allVideogames];\r\n          const orderedGames =\r\n            payload === 'A'\r\n              ? allVideogamesCopy.sort((a, b) => a.rating - b.rating)\r\n              : payload === 'D'\r\n              ? allVideogamesCopy.sort((a, b) => b.rating - a.rating)\r\n              : [...state.allVideogames];\r\n          return {\r\n            ...state,\r\n            filteredGames: orderedGames,\r\n          };\r\n          case LETTERS_ORDERED_GAMES:\r\n\r\n            const allVideogamesCopy2 = [...state.allVideogames];\r\n            const orderedGamesByName =\r\n              payload === 'A-Z'\r\n                ? allVideogamesCopy2.sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))\r\n                : payload === 'Z-A'\r\n                ? allVideogamesCopy2.sort((a, b) => b.name.toLowerCase().localeCompare(a.name.toLowerCase()))\r\n                : [...state.allVideogames];\r\n\r\n            return {\r\n              ...state,\r\n              filteredGames: orderedGamesByName,\r\n            };\r\n        default:\r\n           return { ...state};\r\n    }\r\n}\r\n\r\nexport default reducer;"],"mappings":"AACA,SAAQA,SAAS,EAAEC,eAAe,EAAEC,UAAU,EAAEC,UAAU,EAAEC,qBAAqB,EAAEC,oBAAoB,EAAEC,oBAAoB,EAAEC,qBAAqB,EAAEC,iBAAiB,QAAO,gBAAgB;AAE9L,MAAMC,YAAY,GAAC;EACfC,aAAa,EAAC,EAAE;EAChBC,MAAM,EAAC,EAAE;EACTC,aAAa,EAAE,EAAE;EACjBC,MAAM,EAAE,CAAC;AACb,CAAC;;AAED;AACA,MAAMC,OAAO,GAAE,SAAAA,CAAA,EAAyC;EAAA,IAAxCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAE;IAACU,IAAI;IAAEC;EAAO,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAErD;EACI,QAAOC,IAAI;IACf;IACQ,KAAKnB,SAAS;MACV,OAAO;QACL,GAAGe,KAAK;QACRL,aAAa,EAAEU,OAAO;QACtBR,aAAa,EAAEQ;MACjB,CAAC;IACL,KAAKZ,iBAAiB;MACpB,OAAM;QACJ,GAAGO,KAAK;QACRH,aAAa,EAACQ;MAChB,CAAC;IACH,KAAKnB,eAAe;MAChB,OAAM;QACF,GAAGc,KAAK;QACRF,MAAM,EAACO;MACX,CAAC;IACL,KAAKlB,UAAU;MACX,OAAO;QACH,GAAGa,KAAK;QACRJ,MAAM,EAAES;MACZ,CAAC;IACL,KAAKjB,UAAU;MACX,OAAM;QACF,GAAGY;MACP,CAAC;IACb;IACQ,KAAKX,qBAAqB;MACxB,MAAMiB,YAAY,GAChBD,OAAO,KAAK,IAAI,GACZ,CAAC,GAAGL,KAAK,CAACL,aAAa,CAAC,CAACY,MAAM,CAAEC,IAAI,IAAKC,KAAK,CAACC,QAAQ,CAACF,IAAI,CAACG,EAAE,CAAC,CAAC,CAAC,GACnEN,OAAO,KAAK,KAAK,GACjB,CAAC,GAAGL,KAAK,CAACL,aAAa,CAAC,CAACY,MAAM,CAAEC,IAAI,IAAK,CAACC,KAAK,CAACC,QAAQ,CAACF,IAAI,CAACG,EAAE,CAAC,CAAC,CAAC,GACpE,CAAC,GAAGX,KAAK,CAACL,aAAa,CAAC;MAC9B,OAAO;QACL,GAAGK,KAAK;QACRH,aAAa,EAAES;MACjB,CAAC;IACH,KAAKhB,oBAAoB;MACzB,IAAIsB,UAAU,GAAGZ,KAAK,CAACH,aAAa;MACpC,IAAIgB,YAAY,GACdR,OAAO,KAAK,KAAK,GACbO,UAAU,GACVA,UAAU,CAACL,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACZ,MAAM,CAACkB,QAAQ,CAACT,OAAO,CAAC,CAAC;MAC9D,OAAO;QACL,GAAGL,KAAK;QACRH,aAAa,EAAEgB;MACjB,CAAC;IACH,KAAKtB,oBAAoB;MACvB,MAAMwB,iBAAiB,GAAG,CAAC,GAAGf,KAAK,CAACL,aAAa,CAAC;MAClD,MAAMqB,YAAY,GAChBX,OAAO,KAAK,GAAG,GACXU,iBAAiB,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,MAAM,GAAGD,CAAC,CAACC,MAAM,CAAC,GACrDf,OAAO,KAAK,GAAG,GACfU,iBAAiB,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC,GACrD,CAAC,GAAGpB,KAAK,CAACL,aAAa,CAAC;MAC9B,OAAO;QACL,GAAGK,KAAK;QACRH,aAAa,EAAEmB;MACjB,CAAC;IACD,KAAKxB,qBAAqB;MAExB,MAAM6B,kBAAkB,GAAG,CAAC,GAAGrB,KAAK,CAACL,aAAa,CAAC;MACnD,MAAM2B,kBAAkB,GACtBjB,OAAO,KAAK,KAAK,GACbgB,kBAAkB,CAACJ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,aAAa,CAACN,CAAC,CAACI,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,GAC3FnB,OAAO,KAAK,KAAK,GACjBgB,kBAAkB,CAACJ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACI,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,aAAa,CAACP,CAAC,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,GAC3F,CAAC,GAAGxB,KAAK,CAACL,aAAa,CAAC;MAE9B,OAAO;QACL,GAAGK,KAAK;QACRH,aAAa,EAAEyB;MACjB,CAAC;IACL;MACG,OAAO;QAAE,GAAGtB;MAAK,CAAC;EACzB;AACJ,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}