{"ast":null,"code":"import { GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES } from './action-types';\nconst initialState = {\n  allVideogames: [],\n  genres: [],\n  filteredGames: [],\n  detail: []\n};\n\n//----en la siguiente linea inicio el reducer, pasandole por parametros el stado inicial y las actions destructuradas--//\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  // utilizo un switch para no hacer \"if\" encadenados o en cascadas.\n  switch (type) {\n    ///casos de recuperacion de datos o de carga de los mismos\n    case GET_GAMES:\n      return {\n        ...state,\n        allVideogames: payload,\n        filteredGames: payload\n      };\n    case GET_GAMES_BY_ID:\n      return {\n        ...state,\n        detail: payload\n      };\n    case GET_GENRES:\n      return {\n        ...state,\n        genres: payload\n      };\n    case POST_GAMES:\n      return {\n        ...state\n      };\n    //casos de ordenamiento o filtrado\n    case ORIGIN_FILTERED_GAMES:\n      const filteredFrom = payload === 'db' ? [...state.allVideogames].filter(games => isNaN(parseInt(games.id))) : payload === 'api' ? [...state.allVideogames].filter(games => !isNaN(parseInt(games.id))) : [...state.allVideogames];\n      return {\n        ...state,\n        filteredGames: filteredFrom\n      };\n    case GENRE_FILTERED_GAMES:\n      let allVideogamesGenres = state.allVideogames;\n      let genrefiltered = payload === 'all' ? allVideogamesGenres : allVideogamesGenres.filter(e => {\n        return e.genre.some(d => d.name === payload);\n      });\n    case RATING_ORDERED_GAMES:\n      const allVideogamesCopy = [...state.allVideogames];\n      return {\n        ...state,\n        orderedGames: payload === 'A' ? allVideogamesCopy.sort((a, b) => a.rating - b.rating) : payload === 'D' ? allVideogamesCopy.sort((a, b) => b.rating - a.rating) : [...state.allVideogames]\n      };\n    case LETTERS_ORDERED_GAMES:\n      const allVideogamesCopy2 = [...state.allVideogames];\n      return {\n        ...state,\n        orderedGames: payload === 'A-Z' ? allVideogamesCopy2.sort((a, b) => {\n          if (a.name.toLowerCase() < b.name.toLowerCase()) {\n            return -1;\n          }\n          if (a.name.toLowerCase() > b.name.toLowerCase()) {\n            return 1;\n          }\n          return 0;\n        }) : payload === 'Z-A' ? allVideogamesCopy2.sort((a, b) => {\n          if (a.name.toLowerCase() > b.name.toLowerCase()) {\n            return -1;\n          }\n          if (a.name.toLowerCase() < b.name.toLowerCase()) {\n            return 1;\n          }\n          return 0;\n        }) : [...state, state.allVideogames]\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["GET_GAMES","GET_GAMES_BY_ID","GET_GENRES","POST_GAMES","ORIGIN_FILTERED_GAMES","GENRE_FILTERED_GAMES","RATING_ORDERED_GAMES","LETTERS_ORDERED_GAMES","initialState","allVideogames","genres","filteredGames","detail","reducer","state","arguments","length","undefined","type","payload","filteredFrom","filter","games","isNaN","parseInt","id","allVideogamesGenres","genrefiltered","e","genre","some","d","name","allVideogamesCopy","orderedGames","sort","a","b","rating","allVideogamesCopy2","toLowerCase"],"sources":["C:/Users/rodri/Desktop/PI-Videogames/PI-videogames/client/src/redux/reducer.js"],"sourcesContent":["\r\nimport {GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES } from './action-types'\r\n\r\nconst initialState={\r\n    allVideogames:[],\r\n    genres:[],\r\n    filteredGames: [],\r\n    detail: []\r\n}\r\n\r\n//----en la siguiente linea inicio el reducer, pasandole por parametros el stado inicial y las actions destructuradas--//\r\nconst reducer= (state = initialState, {type, payload})=>{\r\n\r\n// utilizo un switch para no hacer \"if\" encadenados o en cascadas.\r\n    switch(type){\r\n///casos de recuperacion de datos o de carga de los mismos\r\n        case GET_GAMES:\r\n            return{\r\n            ...state,\r\n            allVideogames:payload,\r\n            filteredGames:payload,\r\n        }\r\n        case GET_GAMES_BY_ID:\r\n            return{\r\n                ...state,\r\n                detail:payload,\r\n            }\r\n        case GET_GENRES:\r\n            return{\r\n                ...state,\r\n                genres:payload\r\n            }\r\n        case POST_GAMES:\r\n            return{\r\n                ...state,\r\n            }\r\n//casos de ordenamiento o filtrado\r\n        case ORIGIN_FILTERED_GAMES:\r\n        const filteredFrom =  \r\n            payload === 'db' ? [...state.allVideogames].filter(games=>(isNaN(parseInt(games.id))))\r\n            : payload === 'api' ? [...state.allVideogames].filter(games =>!isNaN(parseInt(games.id)))\r\n            :[...state.allVideogames]\r\n        return {\r\n            ...state,\r\n            filteredGames:filteredFrom,\r\n        }\r\n        case GENRE_FILTERED_GAMES:\r\n            let allVideogamesGenres=state.allVideogames\r\n            let genrefiltered=\r\n            payload === 'all' ? allVideogamesGenres\r\n            :allVideogamesGenres.filter(e=>{return e.genre.some(d=>d.name === payload)})\r\n        case RATING_ORDERED_GAMES:\r\n            const allVideogamesCopy = [...state.allVideogames]\r\n            return{\r\n                ...state,\r\n                orderedGames:\r\n                payload === 'A'\r\n                ?allVideogamesCopy.sort((a, b)=>a.rating - b.rating)\r\n                :payload === 'D' ?allVideogamesCopy.sort((a, b)=>b.rating - a.rating)\r\n                :[...state.allVideogames]\r\n            }\r\n            case LETTERS_ORDERED_GAMES:\r\n                const allVideogamesCopy2 = [...state.allVideogames]\r\n                return{\r\n                    ...state,\r\n                    orderedGames:\r\n                    payload === 'A-Z'\r\n                    ?allVideogamesCopy2.sort((a, b)=> {\r\n                    if(a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\r\n                    if(a.name.toLowerCase() > b.name.toLowerCase()) { return  1; }\r\n                    return 0\r\n                    })\r\n                    : payload === 'Z-A' ? allVideogamesCopy2.sort((a, b)=> {\r\n                        if(a.name.toLowerCase() > b.name.toLowerCase()) { return -1; }\r\n                        if(a.name.toLowerCase() < b.name.toLowerCase()) { return  1; }\r\n                        return 0\r\n                        })\r\n                    :[...state, state.allVideogames]\r\n                }           \r\n        default:\r\n           return { ...state};\r\n    }\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}