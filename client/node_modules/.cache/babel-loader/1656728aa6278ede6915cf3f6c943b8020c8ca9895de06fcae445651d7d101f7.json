{"ast":null,"code":"import { GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES, GET_GAMES_BY_NAME } from './action-types';\nconst initialState = {\n  allVideogames: [],\n  genres: [],\n  filteredGames: [],\n  detail: {}\n};\n\n//----en la siguiente linea inicio el reducer, pasandole por parametros el stado inicial y las actions destructuradas--//\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  // utilizo un switch para no hacer \"if\" encadenados o en cascadas.\n  switch (type) {\n    ///casos de recuperacion de datos o de carga de los mismos\n    case GET_GAMES:\n      return {\n        ...state,\n        allVideogames: payload,\n        filteredGames: payload\n      };\n    case GET_GAMES_BY_NAME:\n      return {\n        ...state,\n        filteredGames: payload\n      };\n    case GET_GAMES_BY_ID:\n      return {\n        ...state,\n        detail: payload\n      };\n    case GET_GENRES:\n      return {\n        ...state,\n        genres: payload\n      };\n    case POST_GAMES:\n      return {\n        ...state\n      };\n    //casos de ordenamiento o filtrado\n    case GENRE_FILTERED_GAMES:\n      const genderFilter = state.allVideogames.filter(game => game.genres.some(genre => genre === action.payload));\n      return {\n        ...state,\n        videogames: action.payload === \"allGenres\" ? [...state.allVideogames] : genderFilter\n      };\n    case ORIGIN_FILTERED_GAMES:\n      let filteredOriginGames = [];\n      if (action.payload === \"API\") filteredOriginGames = state.allVideogames.filter(game => !isNaN(game.id));\n      if (action.payload === \"Database\") filteredOriginGames = state.allVideogames.filter(game => isNaN(game.id));\n      if (action.payload === \"allOrigin\") filteredOriginGames = [...state.allVideogames];\n      return {\n        ...state,\n        videogames: filteredOriginGames\n      };\n    case LETTERS_ORDERED_GAMES:\n      let sortedByName = [];\n      if (action.payload === 'ascA') sortedByName = [...state.allVideogames].sort((a, b) => a.name.localeCompare(b.name));\n      if (action.payload === 'descA') sortedByName = [...state.allVideogames].sort((a, b) => b.name.localeCompare(a.name));\n      if (action.payload === 'none') sortedByName = [...state.allVideogames];\n      return {\n        ...state,\n        videogames: sortedByName\n      };\n    case RATING_ORDERED_GAMES:\n      let sortedByRating = [];\n      if (action.payload === 'ascR') sortedByRating = [...state.allVideogames].sort((a, b) => b.rating - a.rating);\n      if (action.payload === 'descR') sortedByRating = [...state.allVideogames].sort((a, b) => a.rating - b.rating);\n      if (action.payload === 'none') sortedByRating = [...state.allVideogames];\n      return {\n        ...state,\n        videogames: sortedByRating\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["GET_GAMES","GET_GAMES_BY_ID","GET_GENRES","POST_GAMES","ORIGIN_FILTERED_GAMES","GENRE_FILTERED_GAMES","RATING_ORDERED_GAMES","LETTERS_ORDERED_GAMES","GET_GAMES_BY_NAME","initialState","allVideogames","genres","filteredGames","detail","reducer","state","arguments","length","undefined","type","payload","genderFilter","filter","game","some","genre","action","videogames","filteredOriginGames","isNaN","id","sortedByName","sort","a","b","name","localeCompare","sortedByRating","rating"],"sources":["C:/Users/rodri/Desktop/PI-Videogames/PI-videogames/client/src/redux/reducer.js"],"sourcesContent":["\r\nimport {GET_GAMES, GET_GAMES_BY_ID, GET_GENRES, POST_GAMES, ORIGIN_FILTERED_GAMES, GENRE_FILTERED_GAMES, RATING_ORDERED_GAMES, LETTERS_ORDERED_GAMES, GET_GAMES_BY_NAME } from './action-types'\r\n\r\nconst initialState={\r\n    allVideogames:[],\r\n    genres:[],\r\n    filteredGames: [],\r\n    detail: {}\r\n}\r\n\r\n//----en la siguiente linea inicio el reducer, pasandole por parametros el stado inicial y las actions destructuradas--//\r\nconst reducer= (state = initialState, {type, payload})=>{\r\n\r\n// utilizo un switch para no hacer \"if\" encadenados o en cascadas.\r\n    switch(type){\r\n///casos de recuperacion de datos o de carga de los mismos\r\n        case GET_GAMES:\r\n            return{\r\n            ...state,\r\n            allVideogames:payload,\r\n            filteredGames:payload,\r\n\r\n        }\r\n        case GET_GAMES_BY_NAME:\r\n            return{\r\n                ...state,\r\n                filteredGames:payload\r\n            }\r\n        case GET_GAMES_BY_ID:\r\n            return{\r\n                ...state,\r\n                detail:payload,\r\n            }\r\n        case GET_GENRES:\r\n            return{\r\n                ...state,\r\n                genres:payload\r\n            }\r\n        case POST_GAMES:\r\n            return{\r\n                ...state,\r\n            }\r\n//casos de ordenamiento o filtrado\r\ncase GENRE_FILTERED_GAMES:\r\n          const genderFilter = state.allVideogames.filter(game => game.genres.some(genre => genre === action.payload));\r\n            return{...state, videogames:action.payload === \"allGenres\" \r\n              ? [...state.allVideogames] \r\n              : genderFilter\r\n            }\r\n\r\n\r\n        case ORIGIN_FILTERED_GAMES:\r\n          let filteredOriginGames = [];\r\n            if (action.payload === \"API\") filteredOriginGames = state.allVideogames.filter(game => !isNaN(game.id));\r\n            if (action.payload === \"Database\") filteredOriginGames = state.allVideogames.filter(game => isNaN(game.id));\r\n            if (action.payload === \"allOrigin\" )filteredOriginGames = [...state.allVideogames];\r\n              return {...state, videogames: filteredOriginGames};\r\n\r\n\r\n        case LETTERS_ORDERED_GAMES:\r\n          let sortedByName = [];\r\n            if(action.payload === 'ascA') sortedByName = [...state.allVideogames].sort((a, b) => a.name.localeCompare(b.name))\r\n            if(action.payload === 'descA') sortedByName = [...state.allVideogames].sort((a, b) => b.name.localeCompare(a.name))\r\n            if(action.payload === 'none') sortedByName = [...state.allVideogames]\r\n              return {...state, videogames: sortedByName};\r\n\r\n\r\n\r\n        case RATING_ORDERED_GAMES:\r\n          let sortedByRating = [];\r\n            if(action.payload === 'ascR') sortedByRating = [...state.allVideogames].sort((a, b) => b.rating - a.rating)\r\n            if(action.payload === 'descR') sortedByRating = [...state.allVideogames].sort((a, b) => a.rating - b.rating)\r\n            if(action.payload === 'none') sortedByRating = [...state.allVideogames]\r\n              return {...state, videogames: sortedByRating};\r\n        default:\r\n           return { ...state};\r\n    }\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}